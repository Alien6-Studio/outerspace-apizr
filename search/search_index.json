{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OuterSpace Apizr","text":"<p>This is a pure content</p>"},{"location":"about/CODE_OF_CONDUCT/","title":"Code of Conduct for Apizr","text":""},{"location":"about/CODE_OF_CONDUCT/#1-our-pledge","title":"1. Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/CODE_OF_CONDUCT/#2-our-standards","title":"2. Our Standards","text":"<p>Examples of behavior that contribute to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language.</li> <li>Being respectful of differing viewpoints and experiences.</li> <li>Gracefully accepting constructive criticism.</li> <li>Focusing on what is best for the community.</li> <li>Showing empathy towards other community members.</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances.</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks.</li> <li>Public or private harassment.</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission.</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting.</li> </ul>"},{"location":"about/CODE_OF_CONDUCT/#3-our-responsibilities","title":"3. Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/CODE_OF_CONDUCT/#4-scope","title":"4. Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.</p>"},{"location":"about/CODE_OF_CONDUCT/#5-enforcement","title":"5. Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [support@outerspace.sh]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.</p>"},{"location":"about/CODE_OF_CONDUCT/#6-attribution","title":"6. Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html.</p>"},{"location":"about/CONTRIBUTING/","title":"Contributing to Apizr","text":"<p>We love contributions from everyone! Whether you're reporting bugs, proposing new features, or improving documentation, your help is welcome and appreciated. Below you'll find guidelines to make the contribution process as smooth as possible.</p>"},{"location":"about/CONTRIBUTING/#getting-started","title":"Getting Started","text":"<ul> <li>Fork the repository on GitHub.</li> <li>Clone your fork to your local machine.</li> <li>Set up the development environment by following the instructions in the README.</li> </ul>"},{"location":"about/CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Check the issue tracker to see if the problem has already been reported.</li> <li>If not, create a new issue and provide a clear description of the problem, including steps to reproduce, expected behavior, and actual behavior.</li> </ul>"},{"location":"about/CONTRIBUTING/#proposing-enhancements","title":"Proposing Enhancements","text":"<ul> <li>Propose new features and improvements by creating an issue in the issue tracker.</li> <li>Provide a clear description of the enhancement and why it would be valuable to the project.</li> </ul>"},{"location":"about/CONTRIBUTING/#submitting-changes","title":"Submitting Changes","text":"<ul> <li>Create a new branch for your work.</li> <li>Make your changes following the coding standards and best practices outlined in this document.</li> <li>Write meaningful commit messages that explain your changes.</li> <li>Push your changes to your fork on GitHub.</li> <li>Create a pull request against the main repository, describing your changes and referencing any related issues.</li> </ul>"},{"location":"about/CONTRIBUTING/#coding-standards","title":"Coding Standards","text":"<ul> <li>Follow the PEP 8 style guide for Python code.</li> <li>Write clear and concise code with meaningful variable and function names.</li> <li>Add comments and docstrings to explain non-obvious parts of your code.</li> <li>Include unit tests for new code.</li> <li>Ensure all tests pass before submitting a pull request.</li> </ul>"},{"location":"about/CONTRIBUTING/#testing","title":"Testing","text":"<ul> <li>Run the test suite to ensure that your changes don't break existing functionality.</li> <li>Add new tests to cover your changes.</li> </ul>"},{"location":"about/CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Update the documentation to reflect any changes in functionality or API.</li> <li>Follow the documentation style guide to maintain consistency.</li> </ul>"},{"location":"about/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. Please read it to understand our expectations for respectful and collaborative behavior.</p>"},{"location":"about/CONTRIBUTING/#questions","title":"Questions?","text":"<p>If you have any questions or need help with your contribution, don't hesitate to reach out through the issue tracker or other community channels.</p> <p>Thank you for contributing to Apizr!</p>"},{"location":"about/LICENSE/","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2023 Alien6, SASU</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"apis/apizr-api/","title":"Processing and Dockerizing Python Code","text":"<p>Description: Apizr is designed to process and dockerize Python and Jupyter Notebook files. It provides endpoints for converting Jupyter Notebooks into Python code, processing code, and dockerizing Python applications.</p>"},{"location":"apis/apizr-api/#api-endpoints","title":"API Endpoints","text":"<p>POST /process_file/</p> <p>Converts Jupyter Notebook files into Python code, processes the code, and returns the structured output path.</p> <p>Parameters:</p> <ul> <li><code>file</code> (UploadFile, required): The file to process. It can be a Python file or a Jupyter Notebook.</li> <li><code>output</code> (string, optional): Path where the processed file should be saved.</li> </ul> <p>Returns:</p> <p>A dictionary with: - <code>status</code> (string): Returns \"success\" if the processing is successful. - <code>output_path</code> (string): The path to the processed file.</p> <p>Errors:</p> <ul> <li>Returns a <code>400 Bad Request</code> error if the file type is invalid.</li> <li>Returns a <code>500 Internal Server Error</code> for other exceptions during processing.</li> </ul> <p>POST /dockerize_file/</p> <p>Dockerizes the given file.</p> <p>Parameters:</p> <ul> <li><code>filename</code> (string, required): Name of the file to be dockerized.</li> <li><code>output</code> (string, required): Path where the dockerized file should be saved.</li> </ul> <p>Returns:</p> <p>A dictionary with: - <code>status</code> (string): Returns \"success\" if dockerization is successful.</p> <p>Errors:</p> <ul> <li>Returns a <code>400 Bad Request</code> if the filename is empty.</li> <li>Returns a <code>500 Internal Server Error</code> for other exceptions during dockerization.</li> </ul>"},{"location":"apis/code-analyzr-api/","title":"Analyzing Python codebase to extract API endpoints","text":"<p>Description: Code Analyzr extracts API endpoints from Python codebase and generates a configuration file for Apizr.</p>"},{"location":"apis/code-analyzr-api/#api-endpoints","title":"API Endpoints","text":"<p>POST /analyze_file/</p> <p>Analyzes a Python file and returns its structure.</p> <p>Parameters:</p> <ul> <li><code>python_version</code> (string, optional): The Python version to use for the analysis. Defaults to \"3.8\".</li> <li><code>encoding</code> (string, optional): The encoding of the file. Defaults to \"utf-8\".</li> <li><code>functions_to_analyze</code> (string, optional): Comma-separated list of specific functions to analyze. This is useful when you're interested in understanding specific parts of a larger script.</li> <li><code>ignore</code> (string, optional): Comma-separated list of functions to ignore during the analysis. This is beneficial if certain functions are already understood or are not relevant to the current analysis scope.</li> <li><code>file</code> (bytes, required): The file to analyze.</li> </ul> <p>Returns:</p> <p>A dictionary containing the analysis result.</p> <p>POST /analyse_directory/</p> <p>Analyzes all Python files in a directory and returns their structures.</p> <p>Parameters:</p> <ul> <li><code>directory_path</code> (string, required): The path of the directory to analyze.</li> <li><code>python_version</code> (string, optional): The Python version to use for the analysis. Defaults to \"3.8\".</li> <li><code>encoding</code> (string, optional): The encoding of the files. Defaults to \"utf-8\".</li> <li><code>functions_to_analyze</code> (string, optional): Comma-separated list of specific functions to analyze. This is useful when analyzing a larger project with multiple files.</li> <li><code>ignore</code> (string, optional): Comma-separated list of functions to ignore during the analysis. This can be helpful to exclude certain functions from the analysis.</li> </ul> <p>Returns:</p> <p>A dictionary where the keys are file paths and the values are analysis results.</p> <p>More information about the Code Analyzr module can be found here.</p>"},{"location":"apis/dockerizr-api/","title":"Automating Dockerization of Python Projects","text":"<p>Description: Dockerizr provides the following API endpoints to assist in generating various files for containerization.</p>"},{"location":"apis/dockerizr-api/#api-endpoints","title":"API Endpoints","text":"<p>POST /generate_gunicorn_files/</p> <p>Generates files required for Gunicorn.</p> <p>Parameters:</p> <ul> <li><code>conf</code> (DockerizrConfiguration): The configuration details for generating Gunicorn files.</li> </ul> <p>Returns:</p> <p>A success message indicating that Gunicorn files were generated successfully.</p> <p>POST /generate_requirements/</p> <p>Generates a <code>requirements.txt</code> file based on the provided configuration.</p> <p>Parameters:</p> <ul> <li><code>conf</code> (DockerizrConfiguration): The configuration details for generating the <code>requirements.txt</code> file.</li> </ul> <p>Returns:</p> <p>A success message indicating that the <code>requirements.txt</code> file was generated successfully.</p> <p>POST /generate_dockerfile/</p> <p>Generates a Dockerfile based on the provided configuration.</p> <p>Parameters:</p> <ul> <li><code>conf</code> (DockerizrConfiguration): The configuration details for generating the Dockerfile.</li> </ul> <p>Returns:</p> <p>A success message indicating that the Dockerfile was generated successfully.</p>"},{"location":"apis/dockerizr-api/#models","title":"Models","text":""},{"location":"apis/dockerizr-api/#gunicornconfiguration","title":"GunicornConfiguration","text":"<p>GunicornConfiguration</p> <p>Defines the configuration for the server that will run the application.</p> <ul> <li><code>server_app</code> (str): Server application name. Defaults to \"gunicorn\".</li> <li><code>wsgi_file_name</code> (str): Name of the WSGI file. Defaults to \"wsgi.py\".</li> <li><code>wsgi_conf_file_name</code> (str): Name of the WSGI configuration file. Defaults to \"gunicorn.conf.py\".</li> <li><code>host</code> (str): Host address for the server. Defaults to \"0.0.0.0\".</li> <li><code>port</code> (int): Port number for the server. Defaults to 5001.</li> <li><code>workers</code> (int): Number of workers for the server. Defaults to 2.</li> <li><code>timeout</code> (int): Timeout in seconds. Defaults to 60.</li> </ul>"},{"location":"apis/dockerizr-api/#dockerizrconfiguration","title":"DockerizrConfiguration","text":"<p>DockerizrConfiguration</p> <p>Configuration settings for the Dockerizr module. Provides settings related to the Docker containerization of the application.</p> <ul> <li><code>python_version</code> (tuple): The Python version to be used. Defaults to (3, 8).</li> <li><code>encoding</code> (str): The character encoding format for reading and writing files. Defaults to \"utf-8\".</li> <li><code>docker_image</code> (str): Docker image name. Defaults to \"alpine\".</li> <li><code>docker_image_tag</code> (str): Docker image tag. Defaults to \"alpine3.18\".</li> <li><code>dependencies</code> (List[Dependency]): List of dependencies and associated packages.</li> <li><code>custom_packages</code> (List[str]): List of custom packages.</li> <li><code>project_path</code> (str): Path to the project directory. Defaults to the current directory.</li> <li><code>main_folder</code> (Optional[str]): Name of the main folder for the project.</li> <li><code>api_filename</code> (str): Name of the generated FastAPI application file. Defaults to \"app.py\".</li> <li><code>server</code> (GunicornConfiguration): Configuration settings for the Gunicorn server.</li> <li><code>apizr_requirements</code> (List[str]): List of required packages for Apizr.</li> </ul> <p>More information about the Dockerizr module can be found here.</p>"},{"location":"apis/fast-apizr-api/","title":"Generating FastAPI Code from Analysis","text":"<p>Description: Fast Apizr creates FastAPI code based on provided configuration and analysis.</p>"},{"location":"apis/fast-apizr-api/#api-endpoints","title":"API Endpoints","text":"<p>POST /get_fastapi_code/</p> <p>Generates FastAPI code based on the provided configuration and analysis.</p> <p>Parameters:</p> <ul> <li><code>conf</code> (FastApizrConfiguration): The configuration details for the FastAPI code generation.</li> <li><code>analyse</code> (Analyzr): The analysis details to guide the code generation.</li> </ul> <p>Returns:</p> <p>The generated FastAPI code as a plain text response.</p>"},{"location":"apis/fast-apizr-api/#model-fastapizrconfiguration","title":"Model: FastApizrConfiguration","text":"<p>Fast Apizr uses the <code>FastApizrConfiguration</code> model to define the configuration details for generating the FastAPI application. The model has the following attributes:</p> <p>Attributes</p> <ul> <li><code>python_version</code> (tuple): Represents the Python version to be used. It's a tuple containing two integers that represent the major and minor version respectively. Defaults to <code>(3, 8)</code>, which corresponds to Python 3.8.</li> <li><code>encoding</code> (str): The character encoding format used for reading and writing files. Defaults to <code>\"utf-8\"</code>.</li> <li><code>module_name</code> (str): The name of the module for the generated application. Defaults to <code>\"main\"</code>.</li> <li><code>api_filename</code> (str): The name of the generated FastAPI application file. Defaults to <code>\"app.py\"</code>.</li> </ul> <p>More information about the Fast Apizr module can be found here.</p>"},{"location":"apis/notebook-transformr-api/","title":"Converting Jupyter notebooks to Python scripts","text":"<p>Description: Notebook Transformr converts Jupyter notebooks to Python scripts.</p>"},{"location":"apis/notebook-transformr-api/#api-endpoints","title":"API Endpoints","text":"<p>POST /convert_notebook</p> <p>Parameters:</p> <ul> <li><code>python_version</code> (string, optional): The Python version to use for the conversion. Must match the format <code>x.x</code> (e.g., \"3.8\"). Defaults to \"3.8\".</li> <li><code>encoding</code> (string, optional): The encoding of the file. Defaults to \"utf-8\".</li> <li><code>file</code> (UploadFile, required): The notebook file to convert. Must have a <code>.ipynb</code> extension.</li> <li><code>output</code> (string, optional): The directory to save the converted Python script. If not provided, the script will be returned in the response.</li> </ul> <p>Returns:</p> <ul> <li>If the <code>output</code> parameter is provided, a success message with the path to the saved script is returned.</li> <li>Otherwise, a dictionary containing the Python script as a string is returned.</li> </ul> <p>Errors:</p> <ul> <li>Returns a <code>400 Bad Request</code> error if an invalid file type is uploaded.</li> <li>Returns a <code>500 Internal Server Error</code> for other exceptions during the conversion process.</li> </ul> <p>More information about the Notebook Transformr module can be found here.</p>"},{"location":"getting-started/introduction/","title":"Welcome to OuterSpace Apizr","text":"<p>OuterSpace Apizr is a groundbreaking open-source tool that is set to redefine the way data engineers interact with notebooks. It is specifically designed to transform notebooks into powerful, containerized APIs, seamlessly bridging the gap between data analysis and application development.</p> <p>In the world of data engineering, notebooks are an essential tool for exploratory data analysis, prototyping, and sharing results. However, turning these notebooks into production-ready applications can be a challenging task. This is where OuterSpace Apizr comes in. It allows you to convert your notebooks into robust, containerized APIs, enabling you to integrate your data analysis and computations into larger systems and applications with ease.</p>"},{"location":"getting-started/introduction/#installation","title":"Installation","text":"<p>OuterSpace Apizr is now easily installable via pip. To install, simply run:</p> <pre><code>pip install outerspace-apizr\n</code></pre> <p>Once installed, you can start using OuterSpace Apizr to transform your notebooks and enhance your data engineering workflows.</p>"},{"location":"getting-started/developer-guide/setup/","title":"Setting up your workstation for APIzr","text":"<p>This guide provides you with step-by-step instructions to set up a local development environment for the APIzr project. Follow the steps below to ensure a smooth setup.</p>"},{"location":"getting-started/developer-guide/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Python (Version as specified in the project's <code>pyproject.toml</code> file, 3.10 is recommended)</li> <li>Poetry (Python packaging and dependency management tool)</li> </ul>"},{"location":"getting-started/developer-guide/setup/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/developer-guide/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the APIzr repository to your local machine:</p> <pre><code>git clone https://github.com/Alien6-Studio/outerspace-apizr.git\ncd outerspace-apizr\n</code></pre>"},{"location":"getting-started/developer-guide/setup/#2-install-poetry","title":"2. Install Poetry","text":"<p>If you don't already have Poetry installed, you can install it using the provided command:</p> <pre><code>curl -sSL https://install.python-poetry.org | python -\n</code></pre> <p>For alternative installation methods or further details, refer to the Poetry documentation.</p>"},{"location":"getting-started/developer-guide/setup/#3-install-project-dependencies","title":"3. Install Project Dependencies","text":"<p>Once you have Poetry installed and you're inside the project's directory, install the project's dependencies:</p> <pre><code>poetry install\n</code></pre>"},{"location":"getting-started/developer-guide/setup/#4-activating-the-virtual-environment","title":"4. Activating the Virtual Environment","text":"<p>Once dependencies are installed, activate the virtual environment created by Poetry:</p> <pre><code>poetry shell\n</code></pre> <p>Now, you're inside the project's virtual environment and are ready to run any Python or project-specific commands.</p>"},{"location":"getting-started/developer-guide/setup/#5-familiarize-yourself-with-available-commands","title":"5. Familiarize Yourself with Available Commands","text":"<p>The <code>makefile</code> in the project root provides several helpful commands for development tasks. You can view all available commands by running:</p> <pre><code>make help\n</code></pre> <p>Use these commands to lint, format, check the code, and more.</p>"},{"location":"getting-started/user-guide/apizr/","title":"None","text":"<p>APIzr provides a command-line interface (CLI) to convert Jupyter notebooks or Python scripts into containers, analyze Python code, and generate FastAPI applications. This section of the documentation will guide you through the various functionalities and how to use APIzr and its modules effectively.</p> <p>By default:</p> <ul> <li>Using the <code>--notebook</code> option triggers the \"notebook transformr\", initiating the process with a Jupyter notebook as the input.</li> <li>The <code>--script</code> option starts from the next phase, analyzing a given Python script.</li> </ul> <p>It's important to note that the <code>--script</code> and <code>--notebook</code> options are mutually exclusive, meaning you can only use one at a time.</p> <p>For users who want more control over specific steps:</p> <ul> <li>The <code>--skip-docker</code> option skips the containerization phase.</li> <li>The <code>--skip-pipreqs</code> option omits the generation of the <code>pipreqs</code> file, allowing users to manually specify package versions if desired.</li> </ul>"},{"location":"getting-started/user-guide/apizr/#configuration-details","title":"Configuration Details","text":"<p>The execution can be tailored using a configuration file. The configuration is segmented into different sections, each catering to a specific module or general setting. Users can create their own configuration file based on provided templates or detailed instructions, allowing for a customized experience:</p> <ul> <li>General Settings: Define the Python version and file encoding.</li> <li>CodeAnalyzr: Configure the Python script path, functions to analyze, functions to ignore, and specific keywords for certain Python versions.</li> <li>FastAPIzr: Specify the module name and the name of the generated file.</li> <li>Dockerizr: Customize Docker settings, including the Docker image, dependencies, custom packages, and server configurations.</li> </ul> <p>If neither the <code>--configuration</code> option nor the <code>--force</code> option is specified, the CLI will, by default, prompt the user to configure the execution interactively. However, you can:</p> <ul> <li>Directly specify a configuration file using the <code>--configuration</code> option.</li> <li>Use the <code>--force</code> option to execute with default settings, bypassing interactive prompts.</li> </ul>"},{"location":"getting-started/user-guide/code-analyzr/","title":"Using CodeAnalyzr","text":"<p>You may want to analyze Python code using the CodeAnalyzr module without the need to generate a FastAPI application.</p> <pre><code>python code_analyzr/main.py --file [PATH_TO_PYTHON_FILE]\n</code></pre>"},{"location":"getting-started/user-guide/code-analyzr/#advanced-configuration","title":"Advanced Configuration","text":"<p>For a more tailored experience, various options can be used:</p> <ul> <li><code>--version [PYTHON_VERSION]</code>: Specify the Python version to use for the analysis.</li> <li><code>--encoding [ENCODING]</code>: Define the file encoding.</li> <li><code>--analyze [FUNCTION_NAMES]</code>: Provide a comma-separated list of specific functions to analyze. This is useful when you're interested in understanding specific parts of a larger script.</li> <li><code>--ignore [FUNCTION_NAMES]</code>: Provide a comma-separated list of functions to ignore during the analysis. This is beneficial if certain functions are already understood or are not relevant to the current analysis scope.</li> <li><code>--output [OUTPUT_PATH]</code>: Specify a path to save the analysis result. By default, the result will be displayed in the terminal.</li> </ul>"},{"location":"getting-started/user-guide/code-analyzr/#interactive-mode","title":"Interactive Mode","text":"<p>If neither the <code>--configuration</code> option nor the <code>--force</code> option is provided, CodeAnalyzr will, by default, launch an interactive prompt. This prompt will guide users through the configuration process, ensuring that all necessary parameters are set before the analysis begins.</p> <p>For users who wish to skip this interactive mode and use default settings, the <code>--force</code> option can be used:</p> <pre><code>python code_analyzr/main.py --file [PATH_TO_PYTHON_FILE] --force\n</code></pre>"},{"location":"getting-started/user-guide/dockerizr/","title":"Using Dockerizr","text":"<p>Dockerizr is the final piece of the puzzle, seamlessly converting your FastAPI application into a containerized solution. By utilizing Dockerizr, you can ensure that your API is packaged with all the necessary dependencies and is ready for deployment in any environment that supports Docker.</p>"},{"location":"getting-started/user-guide/dockerizr/#basic-usage","title":"Basic Usage","text":"<p>To containerize your FastAPI application:</p> <pre><code>python dockerizr/main.py --project_path [PATH_TO_FASTAPI_PROJECT]\n</code></pre> <p>Point to the directory containing your FastAPI application, and Dockerizr will manage the containerization process.</p>"},{"location":"getting-started/user-guide/dockerizr/#advanced-configuration","title":"Advanced Configuration","text":"<p>To further tailor the containerization process, various options are available:</p> <ul> <li><code>--configuration [CONFIG_FILE_PATH]</code>: Specify a configuration file to customize the Dockerization process.</li> <li><code>--action [ACTION_NAME]</code>: Choose a specific action, such as generating Gunicorn files, <code>requirements.txt</code>, or a Dockerfile.</li> <li><code>--version [PYTHON_VERSION]</code>: Designate the Python version for the container.</li> <li><code>--encoding [ENCODING]</code>: Determine the file encoding.</li> <li><code>--project_path [PROJECT_PATH]</code>: Indicate the path to the FastAPI project that needs containerization.</li> </ul>"},{"location":"getting-started/user-guide/dockerizr/#interactive-mode","title":"Interactive Mode","text":"<p>When executing Dockerizr without specifying the <code>--configuration</code> or <code>--force</code> options, you'll be prompted to interactively configure the containerization process. Here's an example of what an interactive session might look like:</p> <pre><code>$ python dockerizr/main.py --project_path /path/to/your/fastapi/project\n\n&gt; Which Docker image would you like to use? (default is 'alpine'):\n  - alpine\n  - debian\n  Enter your choice: alpine\n\n&gt; Which Docker image tag would you like? (default is 'latest'):\n  - alpine3.17\n  - alpine3.18\n  - latest\n  Enter your choice: latest\n\n&gt; Specify the project path: /path/to/your/fastapi/project\n&gt; Specify the main folder (default is '.'): /path/to/main_folder\n&gt; Name for the API application file (default is 'app.py'): app_name.py\n\n&gt; Which server application would you like to use? (default is 'gunicorn'): gunicorn\n&gt; Name for the WSGI file (default is 'wsgi.py'): wsgi_name.py\n&gt; Name for the WSGI configuration file (default is 'gunicorn.conf.py'): gunicorn_config.py\n&gt; Host for your application (default is '0.0.0.0'): 0.0.0.0\n&gt; Desired port (default is '5001'): 5001\n&gt; Number of workers (default is '2'): 2\n&gt; Timeout in seconds (default is '60'): 60\n</code></pre>"},{"location":"getting-started/user-guide/fast-apizr/","title":"Using FastAPIzr","text":"<p>FastAPIzr serves as a bridge between the analysis of your Python code and the generation of FastAPI applications. After using CodeAnalyzr to analyze a Python script, FastAPIzr takes the resulting output and transforms it into a fully-fledged FastAPI application.</p>"},{"location":"getting-started/user-guide/fast-apizr/#basic-usage","title":"Basic Usage","text":"<p>To generate a FastAPI application using the output from CodeAnalyzr:</p> <pre><code>python fast-apizr/main.py --file [OUTPUT_FROM_CODEANALYZR]\n</code></pre> <p>Ensure you provide the appropriate output from CodeAnalyzr, as FastAPIzr relies on this specific format to generate the FastAPI application.</p>"},{"location":"getting-started/user-guide/fast-apizr/#advanced-configuration","title":"Advanced Configuration","text":"<p>To tailor the generation process to your needs, several options are at your disposal:</p> <ul> <li><code>--version [PYTHON_VERSION]</code>: Designate the Python version for the application generation.</li> <li><code>--encoding [ENCODING]</code>: Determine the file encoding.</li> <li><code>--module_name [MODULE_NAME]</code>: Define the name of the module.</li> <li><code>--api_filename [FILENAME]</code>: Specify the name of the generated file. The default filename is <code>app.py</code>.</li> <li><code>--output [OUTPUT_PATH]</code>: Indicate a path to store the generated FastAPI application.</li> </ul>"},{"location":"getting-started/user-guide/fast-apizr/#interactive-mode","title":"Interactive Mode","text":"<p>In the absence of the <code>--configuration</code> or <code>--force</code> options, FastAPIzr will default to an interactive prompt. This guide assists users in the configuration phase, ensuring that all the required parameters are in place before initiating the generation process.</p> <p>To bypass the interactive mode and use default settings:</p> <pre><code>python fast-apizr/main.py --file [OUTPUT_FROM_CODEANALYZR] --force\n</code></pre>"},{"location":"modules/code-analyzr/","title":"Analyzing Python codebase to extract API endpoints","text":""},{"location":"modules/code-analyzr/#overview","title":"Overview","text":"<p>The Code Analyzr project is designed to extract API endpoints from a provided Python codebase through AST (Abstract Syntax Tree) parsing. The primary entry point is the <code>app.py</code> file, offering functionalities for input validation, code analysis, and file creation.</p> <p>The heart of the extraction process is the <code>AstAnalyzr</code> class located in the <code>analyzr/astAnalyzr.py</code> file. This class uses Python's built-in <code>ast</code> module to parse the provided code and derive meaningful information. The project is further supported by multiple helper classes within the <code>analyzr/ast_node/</code> directory, each dedicated to handling a specific type of AST node, such as annotations, functions, and imports.</p>"},{"location":"modules/code-analyzr/#project-structure","title":"Project Structure","text":"<p>The codebase structure involves:</p> <ul> <li>app.py: Serves as the main entry point. It encompasses functionalities for input validation, code analysis, and file handling.</li> <li>analyzr/astAnalyzr.py: Contains the core <code>AstAnalyzr</code> class, which performs the main analysis.</li> <li>analyzr/ast_node/: A directory that houses helper classes, each tailored to process and derive information from their respective AST nodes.</li> </ul>"},{"location":"modules/code-analyzr/#libraries-and-tools","title":"Libraries and Tools","text":"<p>The project leans heavily on Python's built-in <code>ast</code> module for parsing. It also incorporates other built-in libraries like <code>os</code> for file operations, <code>json</code> for JSON serialization/deserialization, and <code>re</code> for regular expression operations. The <code>typing</code> module facilitates type annotations, granting clarity and type-checking for function arguments and returns.</p>"},{"location":"modules/code-analyzr/#usage","title":"Usage","text":"<p>For utilizing the <code>AstAnalyzr</code> class:</p> <pre><code>from analyzr import AstAnalyzr\n</code></pre> <p>You can then use the <code>AstAnalyzr</code> class to analyze your Python code:</p> <pre><code>analyzer = AstAnalyzr(your_python_code, version=(3, 8))\nresult = analyzer.get_analyse()\n</code></pre> <p>This will return a JSON string with the analysis result of the provided Python code.</p>"},{"location":"modules/code-analyzr/#docker","title":"Docker","text":"<p>To use the Code Analyzr module as a Docker container, you'll need to have Docker installed on your system. Once you've confirmed that Docker is installed, you can pull the Code Analyzr image from Docker Hub as follows:</p> <pre><code>docker pull outerspace.alien6.com/code-analyzr\n</code></pre> <p>You can then run the Code Analyzr container as follows:</p> <pre><code>docker run -it --rm outerspace.alien6.com/code-analyzr\n</code></pre>"},{"location":"modules/code-analyzr/#usecase","title":"Usecase","text":"<p>When you provide Python source code to <code>CodeAnalyzr</code>, it scans the code to identify:</p> <ul> <li>Compatible Python versions</li> <li>Functions present in the code, their arguments, annotations, default values, and return values</li> <li>Imported modules</li> </ul> <p>The output is a structured JSON object that can be used directly or supplied to other tools for further use.</p>"},{"location":"modules/code-analyzr/#example","title":"Example","text":"<p>Take a simple example:</p> <pre><code>import math\n\ndef add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre> <p>The output from <code>CodeAnalyzr</code> would be:</p> <pre><code>{\n  \"version\": [3, 8],\n  \"functions_to_analyze\": [],\n  \"ignore\": [],\n  \"imports\": [{ \"name\": \"math\", \"asname\": null }],\n  \"imports_from\": [],\n  \"functions\": [\n    {\n      \"name\": \"add\",\n      \"args\": [\n        { \"name\": \"a\", \"annotation\": { \"type\": \"int\", \"of\": [] } },\n        { \"name\": \"b\", \"annotation\": { \"type\": \"int\", \"of\": [] } }\n      ],\n      \"returns\": { \"type\": \"int\", \"of\": [] },\n      \"selected\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/dockerizr/","title":"Automating Dockerization of Python Projects","text":""},{"location":"modules/dockerizr/#introduction","title":"Introduction","text":"<p>The Dockerizr module is a dedicated sub-component of OuterSpace Apizr. Crafted in Python, its main objective is to simplify and expedite the dockerization process for Python-based projects. The module has undergone rigorous testing and is compatible with Python 3.8 and subsequent versions.</p>"},{"location":"modules/dockerizr/#features","title":"Features","text":""},{"location":"modules/dockerizr/#automated-dockerfile-generation","title":"Automated Dockerfile Generation","text":"<p>Dockerizr automatically crafts a Dockerfile tailored to the specific needs of your Python project.</p>"},{"location":"modules/dockerizr/#custom-entrypoint-support","title":"Custom Entrypoint Support","text":"<p>Allows users to specify custom startup scripts or commands that will be executed prior to the main application's launch.</p>"},{"location":"modules/dockerizr/#dependency-analysis","title":"Dependency Analysis","text":"<p>Identifies and generates a requirements.txt file by analyzing imports from the project's source code.</p>"},{"location":"modules/dockerizr/#gunicorn-configuration","title":"Gunicorn Configuration","text":"<p>Generates an optimal configuration for Gunicorn, enabling your FastAPI application to run efficiently in production environments.</p>"},{"location":"modules/dockerizr/#usage","title":"Usage","text":""},{"location":"modules/dockerizr/#python-script","title":"Python Script","text":"<p>To leverage Dockerizr, ensure you have Python 3.8 or a later version installed. Upon verification, you can incorporate the Dockerizr module into your Python script or notebook as illustrated:</p> <pre><code>from dockerizr.generator.dockerfileGenerator import DockerGenerator\nfrom dockerizr.configuration import DockerizrConfiguration\n\n# Define the necessary configuration parameters\nconfig = DockerizrConfiguration(\n    project_path=\"path_to_your_project\",\n    docker_image=\"desired_docker_image_name\",\n    python_version=(3, 8),  # example Python version\n    # ... any other necessary configurations ...\n)\n\n# Initialize the DockerGenerator with the configuration\ngenerator = DockerGenerator(config)\n\n# Generate the Dockerfile content\ndockerfile_content = generator.dockerfile_generator()\n</code></pre> <p>This will yield the Dockerfile content for the provided project path.</p>"},{"location":"modules/dockerizr/#usecase","title":"Usecase","text":""},{"location":"modules/dockerizr/#introduction-to-usecase","title":"Introduction to Usecase","text":"<p>Dockerizr streamlines the creation of a containerized setup for Python applications. Given an API file produced by FastApizr, Dockerizr generates:</p> <ul> <li>A <code>Dockerfile</code> that defines how the application should be containerized.</li> <li>A <code>requirements.txt</code> that lists all the necessary Python packages.</li> <li>A <code>wsgi.py</code> that serves as an entry point for the Gunicorn server.</li> <li>A <code>gunicorn.conf.py</code> that configures the Gunicorn server for optimal performance.</li> </ul> <p>With these files in place, your Python application is primed for containerization and deployment using Docker.</p>"},{"location":"modules/dockerizr/#module-structure-and-usage","title":"Module Structure and Usage","text":"<pre><code>Dockerizr\n\u2502\n\u251c\u2500\u2500 main.py - Entry point to interact with Dockerizr functionalities.\n\u2502\n\u2514\u2500\u2500 generator\n    \u251c\u2500\u2500 dockerfileGenerator.py - Handles Dockerfile generation.\n    \u2502   \u251c\u2500\u2500 generate_dockerfile() - Writes the Dockerfile content to the project's main folder.\n    \u2502   \u251c\u2500\u2500 dockerfile_generator() - Crafts Dockerfile content using a Jinja2 template.\n    |\n    \u251c\u2500\u2500 requirementsAnalyzr.py - Manages the generation of the `requirements.txt` file.\n    \u2502   \u251c\u2500\u2500 generate_requirements() - Produces `requirements.txt` based on project imports.\n    |\n    \u251c\u2500\u2500 gunicornGenerator.py - Manages Gunicorn configuration file generation.\n    \u2502   \u251c\u2500\u2500 generate_gunicorn() - Produces WSGI and Gunicorn configuration files.\n    \u2502   \u251c\u2500\u2500 gunicorn_conf_generator() - Crafts Gunicorn configuration content using a Jinja2\n    |\n    \u251c\u2500\u2500 errorLogger.py - A decorator to log exceptions raised by decorated functions.\n    |\n    \u2514\u2500\u2500 templates\n        \u251c\u2500\u2500 dockerfile-alpine.jinja - Jinja2 template for Dockerfile generation\n        \u251c\u2500\u2500 dockerfile-debian.jinja - Jinja2 template for Dockerfile generation\n        \u251c\u2500\u2500 wsgi.jinja - Jinja2 template for Gunicorn configuration file generation\n        \u251c\u2500\u2500 wsgi-conf.jinja - Jinja2 template for Gunicorn configuration file generation\n        \u2514\u2500\u2500 start.sh - Script to run the application\n</code></pre>"},{"location":"modules/dockerizr/#docker","title":"Docker","text":"<p>For Docker-based utilization of the Dockerizr module, ensure Docker is set up on your system. Once validated, the Dockerizr image can be fetched from Docker Hub:</p> <pre><code>docker pull outerspace.alien6.com/dockerizr\n</code></pre> <p>The Dockerizr container can then be initiated as:</p> <pre><code>docker run -it --rm outerspace.alien6.com/dockerizr\n</code></pre>"},{"location":"modules/dockerizr/#dockerfile-explanation","title":"Dockerfile Explanation","text":"<p>The Dockerfile is an essential component in dockerizing applications. Here's a breakdown of the configurations and their purposes:</p> <ol> <li>Base Image: The <code>python:3.11-alpine3.18</code> image is utilized due to its lightweight nature, ensuring reduced image sizes and faster deployment.</li> <li>Dependencies: Packages are updated and essential dependencies like gcc and musl-dev are installed. These are crucial for the compilation of certain Python libraries.</li> <li>Non-privileged User: A non-privileged user is created to run the application. This is a security measure to prevent the application from making unintended system-level changes inside the container.</li> <li>Environment Variables: The <code>PYTHONPATH</code> is set to ensure the source code is correctly detected by Python.</li> <li>Dependencies Installation: Dependencies are fetched from the <code>requirements.txt</code> to ensure all necessary packages for the application's operation are present.</li> <li>Port Exposure: Port 5001 is exposed, making the application accessible.</li> <li>Health Check: A health check ensures the application's continuous operation.</li> <li>Execution Command: Gunicorn serves the application, ensuring enhanced performance and effective request handling.</li> </ol>"},{"location":"modules/dockerizr/#gunicorn-configuration-explanation","title":"Gunicorn Configuration Explanation","text":"<p>Gunicorn is a Python WSGI HTTP server that's employed for serving Python applications in production environments. Here's an understanding of the configuration:</p> <ol> <li>Bind: The application is bound to <code>0.0.0.0:5001</code>, making it accessible from any IP address.</li> <li>Workers: Setting workers to 2 allows for request processing parallelism, improving performance for concurrent applications.</li> <li>Worker Class: Specifying the <code>uvicorn.workers.UvicornWorker</code> class enables Gunicorn to serve ASGI applications like FastAPI.</li> <li>Timeout: This ensures that overly time-consuming requests are terminated, preventing server overloads.</li> <li>Logging: Logging levels and formats are defined to effectively monitor the application's operations.</li> </ol>"},{"location":"modules/fast-apizr/","title":"Generating FastAPI Endpoints from Python Code Analysis","text":""},{"location":"modules/fast-apizr/#overview","title":"Overview","text":"<p>FastApizr is a tool designed to generate FastAPI endpoints by leveraging the output from the Code Analyzr project. The main goal is to automate the process of API creation based on Python codebase analysis. Given the structured output from Code Analyzr, FastApizr can efficiently produce corresponding FastAPI routes, facilitating rapid API development.</p>"},{"location":"modules/fast-apizr/#project-structure","title":"Project Structure","text":"<p>The main components of the FastApizr codebase include:</p> <ul> <li>app.py: This file serves as the central entry point. It contains functionalities for handling input, generating API routes, and saving the resultant FastAPI code.</li> <li>generators/: A directory that holds classes responsible for creating FastAPI routes based on the information from Code Analyzr's output.</li> </ul>"},{"location":"modules/fast-apizr/#libraries-and-tools","title":"Libraries and Tools","text":"<p>FastApizr heavily relies on the FastAPI framework to generate API routes. It also employs Python's built-in <code>json</code> module for handling JSON data and uses the <code>typing</code> module to ensure proper type annotations throughout the code.</p>"},{"location":"modules/fast-apizr/#usage","title":"Usage","text":"<p>To use FastApizr, start by importing the main class:</p> <pre><code>from fastapizr import FastApizr\n</code></pre> <p>Then, provide the JSON output from Code Analyzr to generate FastAPI routes:</p> <pre><code>generator = FastApizr(json_output_from_code_analyzr)\nfastapi_code = generator.generate_api()\n</code></pre> <p>The result is a FastAPI code with routes corresponding to the functions detected in the initial Python codebase.</p>"},{"location":"modules/fast-apizr/#docker","title":"Docker","text":"<p>To use FastApizr as a Docker container, ensure Docker is installed on your system. Afterward, you can pull the FastApizr image from Docker Hub:</p> <pre><code>docker pull outerspace.alien6.com/fastapizr\n</code></pre> <p>To run the FastApizr container, execute:</p> <pre><code>docker run -it --rm outerspace.alien6.com/fastapizr\n</code></pre>"},{"location":"modules/fast-apizr/#usecase","title":"Usecase","text":"<p>FastApizr's primary use case is to expedite the process of creating APIs from existing Python code. By analyzing the Python code with Code Analyzr and using the resultant JSON output, FastApizr crafts FastAPI routes that mirror the detected functions in the original code.</p>"},{"location":"modules/fast-apizr/#example","title":"Example","text":"<p>Given an analyzed output from Code Analyzr:</p> <pre><code>{\n  \"version\": [3, 9],\n  \"functions_to_analyze\": [],\n  \"ignore\": [],\n  \"imports\": [{ \"name\": \"math\", \"asname\": null }],\n  \"imports_from\": [],\n  \"functions\": [\n    {\n      \"name\": \"add\",\n      \"args\": [\n        { \"name\": \"a\", \"annotation\": { \"type\": \"int\", \"of\": [] } },\n        { \"name\": \"b\", \"annotation\": { \"type\": \"int\", \"of\": [] } }\n      ],\n      \"returns\": { \"type\": \"int\", \"of\": [] },\n      \"selected\": true\n    }\n  ]\n}\n</code></pre> <p>FastApizr will produce a FastAPI route similar to:</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport main as main\n\napp = FastAPI()\n\nclass Add_model(BaseModel):\n   a: int\n   b: int\n\n@app.post('/add')\ndef add_service( arguments: Add_model):\n    try:\n        return main.add(a = arguments.a, b = arguments.b)\n    except Exception as err:\n      return {\"errors\": \"an exception was thrown during program execution\"}, 500\n</code></pre>"},{"location":"modules/notebook-transformr/","title":"Converting Jupyter notebooks to Python scripts","text":""},{"location":"modules/notebook-transformr/#introduction","title":"Introduction","text":"<p>The Notebook Transformr module, part of OuterSpace Apizr, is a Python utility that leverages <code>nbconvert</code> to transform Jupyter notebooks (.ipynb files) into Python modules (.py files). It includes additional features like removing consecutive empty lines, filtering specific lines, and leveraging pipreqs to generate a <code>requirements.txt</code> file with notebook dependencies. It's compatible with Python 3.8 and later versions.</p>"},{"location":"modules/notebook-transformr/#features","title":"Features","text":"<ul> <li>Conversion to Python: Converts Jupyter notebooks to Python scripts.</li> <li>Line Filtering: Removes unnecessary lines like the shebang and <code># In[X]</code>.</li> <li>Empty Line Compression: Reduces consecutive empty lines to a single empty line.</li> <li>Code Formatting with Black: Utilizes the Black code formatter to ensure that the generated code is clean and consistent with the PEP 8 style guide.</li> <li>Requirements Generation: Generates a <code>requirements.txt</code> file based on the notebook's dependencies.</li> </ul>"},{"location":"modules/notebook-transformr/#usage","title":"Usage","text":""},{"location":"modules/notebook-transformr/#installation","title":"Installation","text":"<p>To use <code>Notebook Transformr</code>, install the required dependencies using the <code>requirements.txt</code> file located in the <code>apizr/src/notebook_transformr</code> directory.</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"modules/notebook-transformr/#codebase","title":"Codebase","text":"<p>To convert a Jupyter notebook into a Python module, use the <code>NotebookTransformr</code> class from the <code>notebook_transformr</code> module.</p> <pre><code>from notebook_transformr import NotebookTransformr\n\ntransformer = NotebookTransformr()\nsource, _ = transformer.convert_notebook(file_path)\noutput_path = transformer.save_script(source, output_dir, filename)\n</code></pre> <p>This will generate a <code>.py</code> file in the specified output directory and handle specific formatting options like removing consecutive empty lines.</p>"},{"location":"modules/notebook-transformr/#docker","title":"Docker","text":"<p>To use Notebook Transformr as a Docker container, you'll need Docker installed on your system. Pull the Notebook Transformr image from Docker Hub:</p> <pre><code>docker pull outerspace.alien6.com/notebook-transformr\n</code></pre> <p>Run the Notebook Transformr container:</p> <pre><code>docker run -it --rm outerspace.alien6.com/notebook-transformr\n</code></pre>"}]}